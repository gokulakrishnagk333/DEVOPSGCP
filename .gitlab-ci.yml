stages:
  - build
#  - sonarscanner
  - trivyscanner
  - pushtocr
  - deployment
  - zapscanner

Maven Build:
  stage: build
  script:
    - sudo mvn clean install
  tags:
    - devops
  only:
    - main

# Sonar Scanner:
#   stage: sonarscanner
#     - 

Trivy Scanner:
  stage: trivyscanner
  script:
    - sudo trivy --exit-code 1 --no-progress --ignore-unfixed --severity HIGH,CRITICAL flyahead/gokul-usermgmt-webapp:1.2.0
  tags:
    - devops
  only:
    - main

Image Push to Docker Hub:
  stage: pushtocr
  script:
    # -docker login 
    - sudo docker push -t flyahead/gokul-usermgmt-webapp:1.2.0

AKS Deployment:
  stage: deployment
  script:
    # - az login --service-principal -u $AZURE_CLIENT_ID -p $K8S_SECRET_AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    # - az account set --subscription $AZURE_SUBSCRIPTION_ID
    # - az aks get-credentials --resource-group az --name az
    # - cd kubemanifest
    - sudo kubectl apply -f kubemanifest/
  tags:
    - devops
  only:
    - main

Zap Scanner:
  stage: zapscanner
  script:
    - sudo docker run -v $(pwd)/report:/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -I -t http://20.69.82.2/ -r testreport.html
  tags:
    - devops
  only:
    - main



# stages:
#   - Test and Lint
#   - Build and Push
#   - Staging Plan
#   - Staging Apply
#   - Production Plan
#   - Production Apply
#   - Destroy

# Test and Lint:
#   stage: Test and Lint
#   script:
#     - echo "Test and Lint"
#   rules:
#     - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Validate Terraform:
#   stage: Test and Lint
#   script:
#     - echo "Validate Terraform"
#   rules:
#     - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Build and Push:
#   stage: Build and Push
#   script:
#     - echo "Build and Push docker image"
#   rules:
#     - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Staging Plan:
#   stage: Staging Plan
#   script:
#     - echo "Run Terraform Plan for Staging"
#   rules:
#     - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Staging Apply:
#   stage: Staging Apply
#   script:
#     - echo "Run Terraform Apply for Staging"
#   rules:
#     - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Production Plan:
#   stage: Production Plan
#   script:
#     - echo "Run Terraform Plan for Production"
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "production"'

# Production Apply:
#   stage: Production Apply
#   script:
#     - echo "Run Terraform Apply for Production"
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "production"'
#       when: manual

# Staging Destroy:
#   stage: Destroy
#   script:
#     - echo "Run Terraform Destroy for Staging"
#   rules:
#     - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
#       when: manual

# Production Destroy:
#   stage: Destroy
#   script:
#     - echo "Run Terraform Destroy for Production"
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "production"'
#       when: manual
